name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.22']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Clear Go Cache
        run: |
          go clean -cache -modcache -i -r

      - name: Install dependencies
        run: go mod download

      - name: Check code formatting
        run: gofmt -l -e .
        shell: bash

      - name: Run staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest && staticcheck ./...

      - name: Lint code
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54.2
          skip-cache: true
          args: "--timeout=10m"

      - name: Run tests with coverage
        env:
          CGO_ENABLED: 1
        run: |
          echo "mode: count" > coverage.out  # Создаем файл покрытия, если его нет
          go test -v -race -covermode=count -coverprofile=coverage.out ./...

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.out

      - name: Build services
        run: |
          go build -o moderation ./cmd/moderation
          go build -o user_management ./cmd/user_management
          go build -o automation ./cmd/automation
          go build -o analytics ./cmd/analytics

      - name: Build Docker images (test)
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker build -t test-moderation -f cmd/moderation/Dockerfile .
          docker build -t test-user_management -f cmd/user_management/Dockerfile .
          docker build -t test-automation -f cmd/automation/Dockerfile .
          docker build -t test-analytics -f cmd/analytics/Dockerfile .

      - name: Scan dependencies for vulnerabilities
        if: matrix.os == 'ubuntu-latest'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          cache-dir: .trivy-cache  # Используем кэш

      - name: Scan Docker images for vulnerabilities
        if: matrix.os == 'ubuntu-latest'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'image'
          image-ref: test-moderation
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          cache-dir: .trivy-cache  # Используем кэш

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          tags: |
            vladimirvereschagin/telegram-community-bot-moderation:latest
            vladimirvereschagin/telegram-community-bot-user_management:latest
            vladimirvereschagin/telegram-community-bot-automation:latest
            vladimirvereschagin/telegram-community-bot-analytics:latest
  
      - name: Log out from Docker Hub
        run: docker logout