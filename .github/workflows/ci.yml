name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.22']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Clear Go Cache
        run: go clean -cache -modcache -i -r

      - name: Install dependencies
        run: go mod download

      - name: Check code formatting
        run: gofmt -l -e .
        shell: bash

      - name: Run staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest && staticcheck ./...

      - name: Lint code
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54.2
          skip-cache: true
          args: "--timeout=10m"

      - name: Run tests with coverage
        env:
          CGO_ENABLED: 1
        run: go test -v -race -covermode=atomic -coverprofile=coverage.out ./...

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.out

      - name: Build binaries for all services
        run: |
          go build -o moderation ./cmd/moderation
          go build -o user_management ./cmd/user_management
          go build -o automation ./cmd/automation
          go build -o analytics ./cmd/analytics

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image for moderation
        uses: docker/build-push-action@v6
        with:
          context: ./cmd/moderation
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: BUILDKIT_INLINE_CACHE=1
          tags: vladimirvereschagin/telegram-community-bot-moderation:latest

      - name: Build and push Docker image for user management
        uses: docker/build-push-action@v6
        with:
          context: ./cmd/user_management
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: BUILDKIT_INLINE_CACHE=1
          tags: vladimirvereschagin/telegram-community-bot-user_management:latest

      - name: Build and push Docker image for automation
        uses: docker/build-push-action@v6
        with:
          context: ./cmd/automation
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: BUILDKIT_INLINE_CACHE=1
          tags: vladimirvereschagin/telegram-community-bot-automation:latest

      - name: Build and push Docker image for analytics
        uses: docker/build-push-action@v6
        with:
          context: ./cmd/analytics
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: BUILDKIT_INLINE_CACHE=1
          tags: vladimirvereschagin/telegram-community-bot-analytics:latest

      - name: Log out from Docker Hub
        run: docker logout